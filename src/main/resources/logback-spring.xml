<?xml version="1.0" encoding="UTF-8"?>
<!-- Logback配置文件，用于控制日志记录和输出 -->
<configuration>
    <!-- 定义日志存放路径变量，默认在项目根目录的log文件夹下 -->
    <property name="LOG_PATH" value="log"/>
    <!-- 定义日志文件的基础名称 -->
    <property name="APP_NAME" value="coder-gallery"/>

    <!-- 定义控制台输出的日志格式 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 控制台彩色输出配置 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %cyan(%logger{36}) - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 定义INFO级别日志的输出文件及滚动策略 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 只记录INFO级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志文件路径 -->
        <file>${LOG_PATH}/${APP_NAME}-info.log</file>
        <!-- 日志滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天滚动，并按日期归档 -->
            <fileNamePattern>${LOG_PATH}/archive/${APP_NAME}-info-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保存30天的历史记录，超过则删除 -->
            <maxHistory>30</maxHistory>
            <!-- 日志文件最大总大小，超过自动删除旧文件 -->
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 定义ERROR级别日志的输出文件及滚动策略 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!-- 日志文件路径 -->
        <file>${LOG_PATH}/${APP_NAME}-error.log</file>
        <!-- 日志滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天滚动，并按日期归档 -->
            <fileNamePattern>${LOG_PATH}/archive/${APP_NAME}-error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保存60天的历史记录，出错日志通常保留更久 -->
            <maxHistory>60</maxHistory>
            <!-- 日志文件最大总大小，超过自动删除旧文件 -->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 定义一个文件记录所有级别日志的完整记录 -->
    <appender name="ALL_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件路径 -->
        <file>${LOG_PATH}/${APP_NAME}-all.log</file>
        <!-- 日志滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 每天滚动，并按日期和大小归档 -->
            <fileNamePattern>${LOG_PATH}/archive/${APP_NAME}-all-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- 单个文件最大大小 -->
            <maxFileSize>100MB</maxFileSize>
            <!-- 保存15天的历史记录 -->
            <maxHistory>15</maxHistory>
            <!-- 日志文件最大总大小，超过自动删除旧文件 -->
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>
        <!-- 日志格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 自定义SQL日志级别，用于调试MyBatis的SQL语句 -->
    <logger name="org.leocoder.picture" level="DEBUG"/>
    <logger name="org.mybatis" level="INFO"/>
    <logger name="org.springframework" level="INFO"/>
    <logger name="com.alibaba.druid" level="INFO"/>

    <!-- 根日志器，默认使用INFO级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
        <appender-ref ref="ALL_FILE"/>
    </root>

    <!-- 多环境配置，根据Spring配置文件中的配置切换日志级别 -->
    <!-- 开发环境下，使用DEBUG级别，提供更详细的日志记录 -->
    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_FILE"/>
        </root>
    </springProfile>

    <!-- 生产环境下，使用WARN级别，减少日志量，关注重要信息 -->
    <springProfile name="prod">
        <root level="WARN">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO_FILE"/>
            <appender-ref ref="ERROR_FILE"/>
            <appender-ref ref="ALL_FILE"/>
        </root>
    </springProfile>
</configuration>